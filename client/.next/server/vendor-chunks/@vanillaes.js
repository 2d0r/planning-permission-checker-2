"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@vanillaes";
exports.ids = ["vendor-chunks/@vanillaes"];
exports.modules = {

/***/ "(ssr)/./node_modules/@vanillaes/csv/index.js":
/*!**********************************************!*\
  !*** ./node_modules/@vanillaes/csv/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   stringify: () => (/* binding */ stringify)\n/* harmony export */ });\n/**\n * Parse takes a string of CSV data and converts it to a 2 dimensional array\n *\n * options\n * - typed - infer types [false]\n *\n * @static\n * @param {string} csv the CSV string to parse\n * @param {Object} [options] an object containing the options\n * @param {Function} [reviver] a custom function to modify the values\n * @returns {Array} a 2 dimensional array of `[entries][values]`\n */\nfunction parse (csv, options, reviver = v => v) {\n  const ctx = Object.create(null)\n  ctx.options = options || {}\n  ctx.reviver = reviver\n  ctx.value = ''\n  ctx.entry = []\n  ctx.output = []\n  ctx.col = 1\n  ctx.row = 1\n\n  const lexer = /\"|,|\\r\\n|\\n|\\r|[^\",\\r\\n]+/y\n  const isNewline = /^(\\r\\n|\\n|\\r)$/\n\n  let matches = []\n  let match = ''\n  let state = 0\n\n  while ((matches = lexer.exec(csv)) !== null) {\n    match = matches[0]\n\n    switch (state) {\n      case 0: // start of entry\n        switch (true) {\n          case match === '\"':\n            state = 3\n            break\n          case match === ',':\n            state = 0\n            valueEnd(ctx)\n            break\n          case isNewline.test(match):\n            state = 0\n            valueEnd(ctx)\n            entryEnd(ctx)\n            break\n          default:\n            ctx.value += match\n            state = 2\n            break\n        }\n        break\n      case 2: // un-delimited input\n        switch (true) {\n          case match === ',':\n            state = 0\n            valueEnd(ctx)\n            break\n          case isNewline.test(match):\n            state = 0\n            valueEnd(ctx)\n            entryEnd(ctx)\n            break\n          default:\n            state = 4\n            throw Error(`CSVError: Illegal state [row:${ctx.row}, col:${ctx.col}]`)\n        }\n        break\n      case 3: // delimited input\n        switch (true) {\n          case match === '\"':\n            state = 4\n            break\n          default:\n            state = 3\n            ctx.value += match\n            break\n        }\n        break\n      case 4: // escaped or closing delimiter\n        switch (true) {\n          case match === '\"':\n            state = 3\n            ctx.value += match\n            break\n          case match === ',':\n            state = 0\n            valueEnd(ctx)\n            break\n          case isNewline.test(match):\n            state = 0\n            valueEnd(ctx)\n            entryEnd(ctx)\n            break\n          default:\n            throw Error(`CSVError: Illegal state [row:${ctx.row}, col:${ctx.col}]`)\n        }\n        break\n    }\n  }\n\n  // flush the last value\n  if (ctx.entry.length !== 0) {\n    valueEnd(ctx)\n    entryEnd(ctx)\n  }\n\n  return ctx.output\n}\n\n/**\n * Stringify takes a 2 dimensional array of `[entries][values]` and converts them to CSV\n *\n * options\n * - eof - add a trailing newline at the end of file [true]\n *\n * @static\n * @param {Array} array the input array to stringify\n * @param {Object} [options] an object containing the options\n * @param {Function} [replacer] a custom function to modify the values\n * @returns {string} the CSV string\n */\nfunction stringify (array, options = {}, replacer = v => v) {\n  const ctx = Object.create(null)\n  ctx.options = options\n  ctx.options.eof = ctx.options.eof !== undefined ? ctx.options.eof : true\n  ctx.row = 1\n  ctx.col = 1\n  ctx.output = ''\n\n  const needsDelimiters = /\"|,|\\r\\n|\\n|\\r/\n\n  array.forEach((row, rIdx) => {\n    let entry = ''\n    ctx.col = 1\n    row.forEach((col, cIdx) => {\n      if (typeof col === 'string') {\n        col = col.replace(/\"/g, '\"\"')\n        col = needsDelimiters.test(col) ? `\"${col}\"` : col\n      }\n      entry += replacer(col, ctx.row, ctx.col)\n      if (cIdx !== row.length - 1) {\n        entry += ','\n      }\n      ctx.col++\n    })\n    switch (true) {\n      case ctx.options.eof:\n      case !ctx.options.eof && rIdx !== array.length - 1:\n        ctx.output += `${entry}\\n`\n        break\n      default:\n        ctx.output += `${entry}`\n        break\n    }\n    ctx.row++\n  })\n\n  return ctx.output\n}\n\n/** @private */\nfunction valueEnd (ctx) {\n  const value = ctx.options.typed ? inferType(ctx.value) : ctx.value\n  ctx.entry.push(ctx.reviver(value, ctx.row, ctx.col))\n  ctx.value = ''\n  ctx.col++\n}\n\n/** @private */\nfunction entryEnd (ctx) {\n  ctx.output.push(ctx.entry)\n  ctx.entry = []\n  ctx.row++\n  ctx.col = 1\n}\n\n/** @private */\nfunction inferType (value) {\n  const isNumber = /.\\./\n\n  switch (true) {\n    case value === 'true':\n    case value === 'false':\n      return value === 'true'\n    case isNumber.test(value):\n      return parseFloat(value)\n    case isFinite(value):\n      return parseInt(value)\n    default:\n      return value\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vanillaes/csv/index.js\n");

/***/ })

};
;